/*
 * Wager service APIs
 *
 * APIs for a wager system
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"context"
	"github.com/astaxie/beego/orm"
)

type Wager struct {

	Id int64 `orm:"auto;pk" json:"id"`

	TotalWagerValue int32 `json:"total_wager_value"`

	Odds int32 `json:"odds"`

	SellingPercentage int32 `json:"selling_percentage"`

	SellingPrice float32 `json:"selling_price,omitempty"`

	CurrentSellingPrice float32 `json:"current_selling_price,omitempty"`

	PercentageSold int32 `orm:"null" json:"percentage_sold,omitempty"`

	AmountSold float32 `orm:"null" json:"amount_sold,omitempty"`

	PlacedAt int64 `json:"placed_at,omitempty"`
}

func (w *Wager) Create(ctx context.Context) (int64, error) {
	var (
		o = orm.NewOrm()
	)

	return o.Insert(w)
}

func (w *Wager) Read(ctx context.Context) error {
	var (
		o = orm.NewOrm()
	)

	return o.Read(w)
}

func (w *Wager) ReadForUpdate(ctx context.Context) error {
	var (
		o = orm.NewOrm()
	)

	return o.ReadForUpdate(w)
}

func (w *Wager) Update(ctx context.Context) error {
	var (
		o = orm.NewOrm()
	)

	_, err := o.Update(w)
	return err
}

func ListWagers(ctx context.Context, page, limit int32) ([]*Wager, error) {
	var (
		o = orm.NewOrm()
		lWager []*Wager
	)

	_, err := o.QueryTable(new(Wager)).Limit(limit, (page - 1) * limit).All(&lWager)
	return lWager, err
}
